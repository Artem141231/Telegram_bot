import unittest
import datetime
import asyncio
import bcrypt
from mock import MagicMock, patch
from app.handlers import verify_password_async
from database.requests import update_last_notification_sent_interval


class TestSecurityFunctions(unittest.TestCase):
    def test_verify_password_correct(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è verify_password –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
        password = "pass1"
        hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        self.assertTrue(verify_password_async("pass1", hashed))

    def test_verify_password_incorrect(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è verify_password –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False –¥–ª—è –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
        password = "pass1"
        hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        self.assertFalse(verify_password_async("wrongpass", hashed))

    def test_callback_data_parsing(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–±–æ—Ä–∞ callback_data —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º."""
        # –ü—Ä–∏–º–µ—Ä callback_data, –≥–¥–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: "DD-MM-YYYY HH:MM"
        callback_data = "confirm_supervisor:2007:3:13-12-2027 15:30"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º maxsplit=3, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 4 —á–∞—Å—Ç–∏
        parts = callback_data.split(":", 3)
        self.assertEqual(len(parts), 4)
        self.assertEqual(parts[0], "confirm_supervisor")
        self.assertEqual(parts[1], "2007")
        self.assertEqual(parts[2], "3")
        self.assertEqual(parts[3], "13-12-2027 15:30")

    def test_notification_message_formatting(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è."""
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        supervisor_name = "Ivanov Ivan Ivanovich"
        supervisor_job = "Director"
        task_text = "Update client database"
        start_of_term = datetime.datetime(2025, 3, 10, 12, 0)
        current_deadline = datetime.datetime(2025, 3, 11, 12, 0)
        requested_deadline = datetime.datetime(2025, 3, 11, 15, 30)

        message_text = (
            f"üë§ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π: TestSubordinate (TestJob)\n"
            f"üìå –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
            f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {start_of_term.strftime('%d-%m-%Y %H:%M')}\n"
            f"‚è≥ –¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {current_deadline.strftime('%d-%m-%Y %H:%M')}\n"
            f"‚è≥ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {requested_deadline.strftime('%d-%m-%Y %H:%M')}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
        )

        self.assertIn("Update client database", message_text)
        self.assertIn("10-03-2025 12:00", message_text)
        self.assertIn("11-03-2025 12:00", message_text)
        self.assertIn("11-03-2025 15:30", message_text)

    def test_update_last_notification_sent_interval(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è update_last_notification_sent_interval –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç EXEC-—Ö—Ä–∞–Ω–∏–º—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É."""
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –±—É–¥–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å
        from database.requests import update_last_notification_sent_interval

        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫—É—Ä—Å–æ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        dummy_cursor = MagicMock()
        dummy_conn = MagicMock()
        dummy_conn.cursor.return_value = dummy_cursor

        # –ü–∞—Ç—á–∏–º —Ñ—É–Ω–∫—Ü–∏—é get_connection, —á—Ç–æ–±—ã –æ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–ª–∞ –Ω–∞—à–µ —Ñ–∏–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        with patch("database.requests.get_connection", return_value=dummy_conn):
            now = datetime.datetime.now()
            update_last_notification_sent_interval(2007, "24", now)
            dummy_cursor.execute.assert_called_with(
                "EXEC update_last_notification_sent_interval ?, ?, ?", 2007, "24", now
            )
            dummy_conn.commit.assert_called_once()


if __name__ == '__main__':
    unittest.main()
