from bot import bot
import asyncio
from database.requests import fetch_telegram_id_by_user_id, fetch_subordinate_info,fetch_task_details
import app.keydoards as kb
import datetime
from database.requests import (get_tasks_with_deadline_in_range, fetch_update_last_notification_sent_interval,
                               fetch_overdue_tasks, fetch_mark_task_overdue)
from apscheduler.schedulers.asyncio import AsyncIOScheduler


async def notify_creator_task_completed(creator_user_id: int, task_text: str, subordinate_user_id: int):
    telegram_id = await fetch_telegram_id_by_user_id(creator_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {creator_user_id}")
        return

    subordinate_info = await fetch_subordinate_info(subordinate_user_id)
    if not subordinate_info:
        subordinate_text = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫"
    else:
        subordinate_text = f"{subordinate_info['FullName']} ({subordinate_info['JobTitle']})"

    message = (
        f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{task_text}' –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n\n"
        f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {subordinate_text}"
    )
    await bot.send_message(telegram_id, message)


async def notify_supervisor_of_postponement(supervisor_user_id: int, subordinate_user_id: int, task_id: int,
                                            requested_deadline: datetime.datetime):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π Telegram ID —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    telegram_id = await fetch_telegram_id_by_user_id(supervisor_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {supervisor_user_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º
    subordinate_info = await fetch_subordinate_info(subordinate_user_id)
    if subordinate_info:
        subordinate_name = subordinate_info.get("FullName", f"ID {subordinate_user_id}")
        subordinate_job = subordinate_info.get("JobTitle", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        subordinate_name = f"ID {subordinate_user_id}"
        subordinate_job = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    task_details = await fetch_task_details(task_id)
    if not task_details:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return


    task_text = task_details[2]
    start_of_term = task_details[3]
    current_deadline = task_details[4]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    message_text = (
        f"üë§ –ü–æ–¥—á–∏–Ω—ë–Ω–Ω—ã–π: {subordinate_name} ({subordinate_job})\n"
        f"üìå –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {start_of_term.strftime('%d-%m-%Y %H:%M')}\n"
        f"‚è≥ –¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω: {current_deadline.strftime('%d-%m-%Y %H:%M')}\n"
        f"‚è≥ –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {requested_deadline.strftime('%d-%m-%Y %H:%M')}\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å."
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
    await bot.send_message(
        telegram_id,
        message_text,
        reply_markup=kb.supervisor_postponement_keyboard(task_id, subordinate_user_id, requested_deadline)
    )


async def notify_subordinate_of_new_task(supervisor_user_id: int, task_id: int, subordinate_user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º Telegram ID –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ
    telegram_id = await fetch_telegram_id_by_user_id(subordinate_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {subordinate_user_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ fetch_subordinate_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç FIO –∏ JobTitle)
    supervisor_info = await fetch_subordinate_info(supervisor_user_id)
    if supervisor_info:
        supervisor_name = supervisor_info.get("FullName", f"ID {supervisor_user_id}")
        supervisor_job = supervisor_info.get("JobTitle", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        supervisor_name = f"ID {supervisor_user_id}"
        supervisor_job = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    task_details = await fetch_task_details(task_id)
    if not task_details:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ fetch_task_details –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
    # (TaskID, CreatorID, Text, StartOfTerm, Deadline)
    task_text = task_details[2]
    start_of_term = task_details[3]
    current_deadline = task_details[4]

    message_text = (
        f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {supervisor_name} ({supervisor_job})\n"
        f"üìå –ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {start_of_term.strftime('%d-%m-%Y %H:%M')}\n"
        f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {current_deadline.strftime('%d-%m-%Y %H:%M')}"
    )

    await bot.send_message(telegram_id, message_text)


async def notify_subordinate_of_edited_task(supervisor_user_id: int, task_id: int, subordinate_user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º—É –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º.
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:
      - –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è,
      - –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è,
      - –î–∞—Ç—É –≤—ã–¥–∞—á–∏,
      - –¢–µ–∫—É—â–∏–π (–Ω–æ–≤—ã–π) –¥–µ–¥–ª–∞–π–Ω.
    """
    # –ü–æ–ª—É—á–∞–µ–º Telegram chat_id –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ
    telegram_id = await fetch_telegram_id_by_user_id(subordinate_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {subordinate_user_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ fetch_subordinate_info –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è)
    supervisor_info = await fetch_subordinate_info(supervisor_user_id)
    if supervisor_info:
        supervisor_name = supervisor_info.get("FullName", f"ID {supervisor_user_id}")
        supervisor_job = supervisor_info.get("JobTitle", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        supervisor_name = f"ID {supervisor_user_id}"
        supervisor_job = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è; –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ fetch_task_details –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    # (TaskID, CreatorID, Text, StartOfTerm, Deadline)
    task_details = await fetch_task_details(task_id)
    if not task_details:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return

    task_text = task_details[2]
    start_of_term = task_details[3]
    current_deadline = task_details[4]

    message_text = (
        f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {supervisor_name} ({supervisor_job})\n"
        f"üìå –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_text}\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {start_of_term.strftime('%d-%m-%Y %H:%M')}\n"
        f"‚è≥ –ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {current_deadline.strftime('%d-%m-%Y %H:%M')}"
    )

    await bot.send_message(telegram_id, message_text)


async def notify_subordinate_of_deleted_task(supervisor_user_id: int, task_id: int, subordinate_user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º—É –æ —Ç–æ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º.
    –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç:
      - –§–ò–û –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è,
      - –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è,
      - –î–∞—Ç—É –≤—ã–¥–∞—á–∏,
      - –¢–µ–∫—É—â–∏–π –¥–µ–¥–ª–∞–π–Ω.
    """
    # –ü–æ–ª—É—á–∞–µ–º Telegram chat_id –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ
    telegram_id = await fetch_telegram_id_by_user_id(subordinate_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {subordinate_user_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º fetch_subordinate_info, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ –æ–Ω –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å "FullName" –∏ "JobTitle")
    supervisor_info = await fetch_subordinate_info(supervisor_user_id)
    if supervisor_info:
        supervisor_name = supervisor_info.get("FullName", f"ID {supervisor_user_id}")
        supervisor_job = supervisor_info.get("JobTitle", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        supervisor_name = f"ID {supervisor_user_id}"
        supervisor_job = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ fetch_task_details –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂:
    # (TaskID, CreatorID, Text, StartOfTerm, Deadline))
    task_details = await fetch_task_details(task_id)
    if not task_details:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return

    task_text = task_details[2]
    start_of_term = task_details[3]
    current_deadline = task_details[4]

    message_text = (
        f"üë§ –†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å: {supervisor_name} ({supervisor_job})\n"
        f"üìå –ó–∞–¥–∞–Ω–∏–µ: {task_text} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.\n"
        f"üìÖ –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: {start_of_term.strftime('%d-%m-%Y %H:%M')}\n"
        f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {current_deadline.strftime('%d-%m-%Y')}"
    )

    await bot.send_message(telegram_id, message_text)


async def notify_subordinate_of_postponement_result(supervisor_user_id: int, subordinate_user_id: int, task_id: int, result: str, requested_deadline: datetime.datetime = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–º—É –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
    result: "approved" –∏–ª–∏ "rejected"
    –ï—Å–ª–∏ result == "approved", —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è requested_deadline.
    """
    telegram_id = await fetch_telegram_id_by_user_id(subordinate_user_id)
    if not telegram_id:
        print(f"‚ùå –û—à–∏–±–∫–∞: Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {subordinate_user_id}")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ
    supervisor_info = await fetch_subordinate_info(supervisor_user_id)
    if supervisor_info:
        supervisor_name = supervisor_info.get("FullName", f"ID {supervisor_user_id}")
        supervisor_job = supervisor_info.get("JobTitle", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    else:
        supervisor_name = f"ID {supervisor_user_id}"
        supervisor_job = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è
    task_details = await fetch_task_details(task_id)
    if not task_details:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è.")
        return

    task_text = task_details[2]

    if result.lower() == "approved":
        message_text = (
            f"‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è '{task_text}' –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º "
            f"{supervisor_name} ({supervisor_job}).\n"
            f"–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {requested_deadline.strftime('%d-%m-%Y %H:%M')}."
        )
    else:
        message_text = (
            f"‚ùå –í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –¥–µ–¥–ª–∞–π–Ω–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è '{task_text}' –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–º "
            f"{supervisor_name} ({supervisor_job})."
        )

    await bot.send_message(telegram_id, message_text)


async def check_tasks_for_notifications():
    now = datetime.datetime.now()
    intervals = [
        {"hours": 24, "label": "24 —á–∞—Å–∞", "field": "LastNotificationSent24", "cooldown": datetime.timedelta(hours=24)},
        {"hours": 12, "label": "12 —á–∞—Å–æ–≤", "field": "LastNotificationSent12", "cooldown": datetime.timedelta(hours=12)},
        {"hours": 1, "label": "1 —á–∞—Å", "field": "LastNotificationSent1", "cooldown": datetime.timedelta(hours=1)}
    ]
    tolerance = datetime.timedelta(minutes=5)

    for interval in intervals:
        target_time = now + datetime.timedelta(hours=interval["hours"])
        target_start = target_time - tolerance
        target_end = target_time + tolerance
        # print(
        #    f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –º–µ–∂–¥—É {target_start} –∏ {target_end} –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ {interval['label']}")

        tasks = await asyncio.to_thread(get_tasks_with_deadline_in_range, target_start, target_end)
        # print(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")

        for task in tasks:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
            last_sent = task.get(interval["field"])
            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —Å –Ω–µ–≥–æ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ cooldown, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.
            if last_sent and (now - last_sent) < interval["cooldown"]:
                #     print(f"üîπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task['TaskID']} –∑–∞ {interval['label']}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            telegram_id = await fetch_telegram_id_by_user_id(task["AssigneeID"])
            if not telegram_id:
                print(f"‚ùå Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è UserID {task['AssigneeID']}")
                continue

            message_text = (
                f"üìå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–¥–∞–Ω–∏–µ '{task['Text']}' –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {interval['label']}.\n"
                f"‚è≥ –î–µ–¥–ª–∞–π–Ω: {task['Deadline'].strftime('%d-%m-%Y %H:%M')}."
            )
            await bot.send_message(telegram_id, message_text)
            #print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–¥–∞—á–∏ {task['TaskID']} –∑–∞ {interval['label']}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            # interval["label"].split()[0] –≤–µ—Ä–Ω—ë—Ç "24", "12" –∏–ª–∏ "1"
            await fetch_update_last_notification_sent_interval(task["TaskID"], interval["label"].split()[0], now)


async def check_overdue_tasks():
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {datetime.datetime.now()}")
    tasks = await fetch_overdue_tasks()
    print(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: {len(tasks)}")
    for task in tasks:
        await fetch_mark_task_overdue(task["TaskID"], task["AssigneeID"])
        print(f"–ó–∞–¥–∞–Ω–∏–µ {task['TaskID']} –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {task['AssigneeID']} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ.")

