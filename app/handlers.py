from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart,Command
from aiogram.fsm.state import State,StatesGroup #–°–æ—Å—Ç–æ—è–Ω–∏–µ
from aiogram.fsm.context import FSMContext #–°–æ—Å—Ç–æ—è–Ω–∏–µ

from database.requests import (fetch_user_by_login, fetch_assigned_tasks,fetch_user_by_subordinate, insert_task,
                               fetch_insert_task_assignee, fetch_update_task)
import app.keydoards as kb
import datetime
import asyncio


router = Router()


class Register(StatesGroup):
    login= State()
    password=State()
    select_subordinate = State()


class Task (StatesGroup):
    entering_task = State()
    entering_deadline = State()


class TaskEditing(StatesGroup):
    new_text = State()
    new_deadline = State()


@router.message(CommandStart())
async def Start_Authorization(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    await state.set_state(Register.login)


@router.message(Register.login)
async def authorization_login(message: Message, state: FSMContext):
    login = message.text
    user = await fetch_user_by_login(login)
    if user:
        await state.update_data(login=login, user_id=user.UserID)
        await state.set_state(Register.password)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


@router.message(Register.password)
async def authorization_password(message: Message, state: FSMContext):
    data = await state.get_data()
    login = data.get("login")
    provided_password = message.text
    user = await fetch_user_by_login(login)
    if user:
        if provided_password == user.Password:
            await state.update_data(user_id=user.UserID)
            await message.answer("–í—Ö–æ–¥ —É—Å–ø–µ—à–Ω—ã–π", reply_markup=kb.Supervisor)
            await state.set_state("LoggedIn")
        else:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        await state.clear()


@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏")
async def assigned_tasks(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return
    tasks = await fetch_assigned_tasks(user_id)
    if tasks:
        result_text = ""
        for index, row in enumerate(tasks, start=1):
            result_text += (f"{index}. –ó–∞–¥–∞—á–∞: {row.TaskText}\n"
                            f"–û—Ç: {row.CreatorFio} ({row.CreatorRole})\n"
                            f"–î–ª—è: {row.AssigneeFio} ({row.AssigneeRole})\n"
                            f"–ù–∞—á–∞–ª–æ: {row.StartOfTerm}\n"
                            f"–î–µ–¥–ª–∞–π–Ω: {row.Deadline}\n\n")
        await message.answer(result_text)
    else:
        await message.answer("–ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")


@router.message(F.text == "–í—ã–±—Ä–∞—Ç—å –ø–æ–¥—á–∏–Ω–µ–Ω–Ω–æ–≥–æ")
async def subordinate(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data.get("user_id")
    if not user_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return

    rows = await fetch_user_by_subordinate(user_id)

    if rows:
        result_text = ":\n"
        available_ids = []
        for row in rows:
            result_text += (
                f"ID: {row.UserID}\n"
                f"–ò–º—è: {row.Fio}\n"
                f"–¢–∏–ø: {row.Type}\n\n"
            )
            available_ids.append(str(row.UserID))
        result_text += "–í–≤–µ–¥–∏—Ç–µ ID –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ:"
        await message.answer(result_text)
        await state.update_data(available_subordinate_ids=available_ids)
        await state.set_state(Register.select_subordinate)
    else:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥—á–∏–Ω—ë–Ω–Ω—ã—Ö")


@router.message(Register.select_subordinate)
async def handle_subordinate_selection(message: Message, state: FSMContext):
    subordinate_id = message.text.strip()
    data = await state.get_data()
    available_ids = data.get("available_subordinate_ids", [])
    if subordinate_id not in available_ids:
        await message.answer("–í–≤–µ–¥—ë–Ω–Ω—ã–π ID –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ID –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return
    await state.update_data(subordinate_id=subordinate_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ:", reply_markup=kb.Select_subordinate)
    await state.set_state("SubordinateAction")


@router.callback_query(F.data == "Add_task")
async def add_task_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(Task.entering_task)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
    await callback.answer()


@router.callback_query(F.data == "Add_task")
async def add_task_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ:")
    await state.set_state(Task.entering_task)  # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∑–∞–¥–∞–Ω–∏—è
    await callback.answer()

@router.message(Task.entering_task)
async def process_task(message: Message, state: FSMContext):
    task_text = message.text.strip()
    if not task_text:
        await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return
    await state.update_data(task_text=task_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(Task.entering_deadline)


@router.message(Task.entering_deadline)
async def process_deadline(message: Message, state: FSMContext):
    deadline_text = message.text.strip()
    try:
        deadline_date = datetime.datetime.strptime(deadline_text, "%Y-%m-%d")
        if deadline_date.date() < datetime.date.today():
            await message.answer("–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω:")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return
    data = await state.get_data()
    task_text = data.get("task_text")
    creator_id = data.get("user_id")  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç–µ–ª—è –∑–∞–¥–∞—á–∏)
    subordinate_id = data.get("subordinate_id")  # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥—á–∏–Ω—ë–Ω–Ω–æ–≥–æ

    if not creator_id or not subordinate_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        return
    start_of_term = datetime.datetime.now()
    task_id = await asyncio.to_thread(insert_task, creator_id, task_text, start_of_term, deadline_date)
    assignment_id = await fetch_insert_task_assignee(task_id, subordinate_id, "–í –ø—Ä–æ—Ü–µ—Å—Å–µ")
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\nüìå {task_text}\nüìÖ –î–µ–¥–ª–∞–π–Ω: {deadline_date.date()}\nTaskID: {task_id}\nAssignmentID: {assignment_id}"
    )

    @router.callback_query(F.data == "Edit_task")
    async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await state.set_state(TaskEditing.new_text)
        await callback.answer()

    @router.message(TaskEditing.new_text)
    async def process_edit_task(message: Message, state: FSMContext):
        new_text = message.text.strip()
        await message.answer(f"–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞:\n{new_text}")


@router.callback_query(F.data == "Edit_task")
async def edit_task_callback(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏
    data = await state.get_data()
    task_id = data.get("task_id")
    if not task_id:
        await callback.message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await callback.answer()
        return
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
    await state.set_state(TaskEditing.new_text)
    await callback.answer()


@router.message(TaskEditing.new_text)
async def process_new_text(message: Message, state: FSMContext):
    new_text = message.text.strip()
    if not new_text:
        await message.answer("–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        return
    await state.update_data(new_text=new_text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
    await state.set_state(TaskEditing.new_deadline)


@router.message(TaskEditing.new_deadline)
async def process_new_deadline(message: Message, state: FSMContext):
    new_deadline_text = message.text.strip()
    try:
        new_deadline = datetime.datetime.strptime(new_deadline_text, "%Y-%m-%d")
        if new_deadline.date() < datetime.date.today():
            await message.answer("–î–µ–¥–ª–∞–π–Ω –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–µ–¥–ª–∞–π–Ω:")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD:")
        return

    data = await state.get_data()
    new_text = data.get("new_text")
    task_id = data.get("task_id")
    if not task_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await fetch_update_task(task_id, new_text, new_deadline)

    await message.answer(
        f"–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {new_text}\n–ù–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω: {new_deadline.date()}"
    )